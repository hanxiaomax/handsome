# Cursor Rules for Tool Suite Website

## General Guidelines

- Use English exclusively for all code, comments, documentation, and user-facing text
- Absolutely no Chinese characters in code, variable names, function names, comments, or UI text
- Follow TypeScript best practices with strict type checking
- Prioritize accessibility and responsive design
- Maintain consistent code style across the project
- Use clean, minimal design without emoji or decorative elements

## Design Principles

### Core Values
- **Privacy First**: All data processing happens locally in the browser
- **Frontend Priority**: Basic functions work offline, advanced features optional
- **Zero Configuration**: Users need no software installation
- **Modular Architecture**: Independent tool development and loading
- **Progressive Enhancement**: Core functionality first, then advanced features

### Technical Constraints
- First load: < 2 seconds
- Tool startup: < 1 second  
- File processing: ≤ 100MB files
- Memory limit: < 500MB per tool
- Browser support: Chrome 90+, Firefox 88+, Safari 14+, Edge 90+

## Project Structure

```
src/
├── app/                     # Application pages (扁平化)
│   ├── homepage.tsx         # Main homepage component
│   └── favorites.tsx        # Favorites page component
├── components/              # UI Components (功能分组)
│   ├── ui/                  # shadcn/ui base components
│   ├── layout/              # Layout templates and wrappers
│   ├── navigation/          # Navigation-related components (高内聚)
│   │   ├── theme-toggle.tsx # Theme switching component
│   │   └── welcome-page.tsx # Welcome/landing page component
│   └── tools/               # Tool display components (高内聚)
│       ├── tool-card.tsx    # Tool card component
│       ├── tool-info-card.tsx # Tool information card
│       ├── tool-detail.tsx  # Tool detail view
│       └── dashboard-charts.tsx # Dashboard charts
├── contexts/                # React Context providers (扁平化)
├── hooks/                   # Custom React hooks (扁平化)
├── lib/                     # Utility functions (扁平化)
├── types/                   # TypeScript type definitions (扁平化)
├── tools/                   # Tool implementations
│   └── [tool-name]/
│       ├── ui.tsx           # Tool UI component
│       ├── toolInfo.ts      # Tool metadata
│       ├── lib.ts           # Simple tool logic
│       ├── lib/             # Complex tool logic (when needed)
│       ├── components/      # Tool-specific components (when needed)
│       └── docs/            # Tool documentation (推荐)
│           ├── specification.md
│           └── api-reference.md
├── data/                    # Static data and configurations
└── assets/                  # Static assets (images, icons, etc.)
```

## Technology Stack

### Core Framework
- **React 18.2.0**: UI framework with functional components and hooks
- **TypeScript 5.5+**: Type-safe JavaScript with strict mode
- **Vite 6.3.5**: Modern build tool with fast HMR

### UI & Styling
- **Tailwind CSS 4.0**: Atomic CSS framework
- **shadcn/ui 2.5.0**: Reusable UI components
- **Radix UI**: Headless UI primitives for accessibility

### Development Tools
- **ESLint**: Code quality with TypeScript rules
- **Prettier**: Code formatting
- **Vitest**: Unit testing framework
- **Husky**: Git hooks for quality gates

## Code Standards

### TypeScript
- Use strict mode with "strict": true
- Prefer interface over type for object shapes
- Use generic types where appropriate
- Always define return types for functions
- Use const assertions for readonly data

### React Components
- Use functional components with hooks exclusively
- Prefer named exports over default exports for components
- Use forwardRef for components that need ref forwarding
- Implement proper error boundaries
- Use React.memo for performance optimization when needed
- **Add meaningful comments and IDs to key components for better communication and maintenance**

#### Component Documentation Standards
All key UI components must include:

1. **Component Comments**: Clear, descriptive comments for major sections
   ```typescript
   {/* Component Name - Brief functional description */}
   ```

2. **Unique IDs**: Use kebab-case IDs for important components
   ```typescript
   <div id="component-section-name" className="...">
   ```

3. **Required Documentation for**:
   - Main container areas (toolbars, status bars, content areas)
   - Input and output sections
   - Control panels and button groups  
   - Modal dialogs and overlays
   - Complex interactive components
   - Navigation elements
   - Form sections and field groups

#### Example Implementation:
```typescript
export default function MyTool() {
  return (
    <ToolLayout>
      {/* Main Tool Container - Primary workspace */}
      <div id="tool-main-container" className="w-full p-6 space-y-6">
        
        {/* Input Section - User data entry area */}
        <div id="input-section" className="space-y-4">
          {/* Input controls */}
        </div>
        
        {/* Control Panel - Action buttons and settings */}
        <div id="control-panel" className="flex items-center gap-2">
          {/* Control buttons */}
        </div>
        
        {/* Results Display - Output and visualization */}
        <div id="results-section" className="space-y-4">
          {/* Results content */}
        </div>
      </div>
    </ToolLayout>
  )
}
```

### File Naming
- Use kebab-case for file and folder names
- Use PascalCase for React component files (e.g., TextInput.tsx)
- Use camelCase for utility functions and hooks
- Use UPPER_CASE for constants

### Import Organization
```typescript
// 1. React and external libraries
import React from 'react'
import { useState, useEffect } from 'react'

// 2. Internal UI components (shadcn/ui)
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'

// 3. Framework common components
import { FileUpload } from '@/components/common/file-upload'
import { ResultDisplay } from '@/components/common/result-display'

// 4. Internal components and hooks
import { useToolLoader } from '@/hooks/use-tool-loader'

// 5. Utilities and types
import { cn } from '@/lib/utils'
import type { ToolInfo } from '@/types/tool'
```

## Tool Development Guidelines

### Tool Component Structure
```typescript
// tools/[tool-name]/ui.tsx
import { useState, useCallback } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

interface ToolState {
  // Define tool-specific state
}

export default function ToolName() {
  const [state, setState] = useState<ToolState>({})
  
  const handleProcess = useCallback(() => {
    // Tool logic here
  }, [/* dependencies */])

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <CardTitle>Tool Name</CardTitle>
      </CardHeader>
      <CardContent>
        {/* Tool UI implementation */}
      </CardContent>
    </Card>
  )
}
```

### Tool Metadata Structure
```typescript
// tools/[tool-name]/toolInfo.ts
import type { ToolInfo } from '@/types/tool'
import { SomeIcon } from 'lucide-react'

export const toolInfo: ToolInfo = {
  id: 'tool-name',
  name: 'Tool Name',
  description: 'Tool description',
  category: 'development' | 'text' | 'file' | 'encode' | 'crypto' | 'image',
  tags: ['tag1', 'tag2'],
  requiresBackend: false,
  icon: SomeIcon,
  path: '/tools/tool-name'
}
```

### Tool Layout Flexibility
- Each tool may have different layout requirements and component arrangements
- Tools can use any combination of the three main areas (Input, Controls, Output)
- Some tools may require custom layouts that don't follow the standard three-column pattern
- Tools should adapt their layout based on their specific functionality needs

## Common Component Usage

### Framework-Provided Common Components
Always prefer these common components for consistency and efficiency:

- **FileUpload**: Standardized file upload with drag-drop, validation, and progress
- **TextInput**: Multi-line text editor with syntax highlighting and formatting
- **ResultDisplay**: Unified result presentation with copy/download capabilities
- **CopyButton**: Consistent copy-to-clipboard functionality
- **LoadingSpinner**: Standardized loading states and progress indicators
- **ErrorBoundary**: Centralized error handling and user-friendly error display

### When to Use Common Components
- **Consistency**: Use common components to maintain UI consistency across tools
- **Efficiency**: Leverage pre-built, tested components instead of rebuilding functionality
- **Maintenance**: Common components are centrally maintained and updated
- **Accessibility**: Common components include built-in accessibility features

### Tool-Specific Components
Create custom components only when:
- Functionality is unique to that specific tool
- Standard components don't meet the tool's specific requirements
- Custom interaction patterns are needed for the tool's workflow

### Component Integration Example
```typescript
// Example: Tool using both common and custom components
import { Card } from '@/components/ui/card';           // shadcn/ui base
import { FileUpload } from '@/components/common/file-upload';  // Framework common
import { ResultDisplay } from '@/components/common/result-display'; // Framework common
import { CustomCalculatorGrid } from './components/calculator-grid'; // Tool-specific

export default function MyTool() {
  return (
    <Card>
      <FileUpload onFileSelect={handleFile} />      {/* Common component */}
      <CustomCalculatorGrid onCalculate={calc} />   {/* Tool-specific */}
      <ResultDisplay result={result} />             {/* Common component */}
    </Card>
  );
}
```

## Styling Guidelines

### Design System Adherence
- Use shadcn/ui color tokens and spacing system
- Maintain consistent border radius (0.5rem)
- Follow 4px base spacing unit (0.25rem)
- Use Inter font for UI, monospace for code
- Implement subtle elevation system with consistent shadows

### Tailwind CSS Usage
- Use Tailwind classes instead of custom CSS when possible
- Follow responsive design patterns: sm:, md:, lg:, xl:
- Use semantic color classes: primary, secondary, destructive, muted
- Prefer utility classes over custom CSS for spacing and layout

### Component Styling
- Use cn() utility for conditional classes
- Keep component styles consistent with design system
- Support dark mode with appropriate color variants
- Ensure sufficient color contrast for accessibility (WCAG 2.1)

### Theme Integration
```css
:root {
  --background: 0 0% 100%;
  --foreground: 222.2 84% 4.9%;
  --primary: 221.2 83.2% 53.3%;
  --border: 214.3 31.8% 91.4%;
  --radius: 0.5rem;
}
```

## Performance Guidelines

### Code Splitting
- Use dynamic imports for tool components
- Implement lazy loading for heavy dependencies
- Split vendor bundles appropriately
- Route-based code splitting for pages

### Memory Management
- Clean up event listeners and timeouts
- Dispose of heavy objects when components unmount
- Monitor memory usage for file processing tools
- Implement cancellation tokens for long operations

### Bundle Optimization
- Use tree shaking for unused code elimination
- Optimize images and assets
- Minimize third-party dependencies
- Lazy load tool-specific libraries

## State Management

### Application State Structure
```typescript
interface AppState {
  theme: 'light' | 'dark' | 'system';
  tools: ToolInfo[];
  currentTool: string | null;
  loading: boolean;
  error: string | null;
}

interface ToolPageState {
  toolId: string;
  processing: boolean;
  progress: number;
  error: string | null;
  inputType: 'text' | 'file';
  textInput: string;
  fileInput: File | null;
  params: Record<string, any>;
  output: {
    type: 'text' | 'file' | 'image';
    content: string | Blob;
    metadata?: Record<string, any>;
  } | null;
}
```

## Testing Requirements

### Unit Tests
- Test all utility functions with >90% coverage
- Test custom hooks behavior
- Test tool logic functions
- Test component rendering and props

### Component Tests
- Test component rendering with various props
- Test user interactions and event handlers
- Test error states and edge cases
- Test accessibility features (ARIA, keyboard navigation)

### Integration Tests
- Test tool workflows end-to-end
- Test file upload and processing flows
- Test cross-tool navigation
- Test responsive layout behavior

## Accessibility Standards

### ARIA Support
- Use semantic HTML elements as foundation
- Add ARIA labels where needed for complex components
- Implement proper focus management
- Support comprehensive keyboard navigation

### Screen Reader Support
- Provide descriptive alt text for images
- Use descriptive link text and button labels
- Announce dynamic content changes
- Test with actual screen readers

### Visual Accessibility
- Support high contrast mode
- Ensure scalable fonts work properly
- Use color-independent indicators
- Provide clear focus indicators

### Keyboard Navigation
- Tab order: Search → Categories → Tools → Actions
- Arrow keys for navigation within components
- Enter/Space for activation
- Escape for dismissal and modal closure

## Security Guidelines

### Client-Side Security
- Validate all user inputs before processing
- Sanitize file uploads and content
- Implement Content Security Policy (CSP) headers
- Never expose sensitive data in client code

### Data Handling
- Process data locally when possible (privacy-first)
- Clear sensitive data after processing
- Use secure communication protocols for any backend calls
- Implement proper error handling without data leakage

## Error Handling

### Error Categories
1. **Input Errors**: Invalid format, size limit, missing data
2. **Processing Errors**: Parse failure, conversion error, timeout
3. **Output Errors**: Generation failure, download error, copy failure

### Error Boundaries
- Implement error boundaries for tool components
- Provide user-friendly error messages
- Log errors for debugging (development only)
- Graceful degradation for unsupported features

### Input Validation
- Validate file types and sizes before processing
- Check text input formats and constraints
- Handle edge cases gracefully
- Provide clear, actionable validation messages

## Documentation Standards

### Code Comments
- Use English for all comments
- Document complex algorithms and business logic
- Explain non-obvious decisions and trade-offs
- Keep comments up to date with code changes

### Component Documentation
- Document component props and usage patterns
- Provide examples for complex components
- Document accessibility features and keyboard shortcuts
- Include performance considerations and limitations

### Tool Specifications
- Each tool must have a detailed specification document
- Include UI mockups, technical implementation, and testing requirements
- Document component architecture and data flow
- Specify responsive design and accessibility requirements

## Git Workflow

### Commit Messages
- Use English for all commit messages
- Follow conventional commit format: type(scope): description
- Include scope when relevant (e.g., feat(calculator): add bitwise operations)
- Keep messages concise but descriptive

### Branch Naming
- Use feature/tool-name for new tool development
- Use fix/issue-description for bug fixes
- Use refactor/component-name for refactoring
- Use docs/section-name for documentation updates

## Development Environment

### Editor Configuration
- Use ESLint with recommended TypeScript rules
- Configure Prettier for consistent formatting
- Set up path aliases for clean imports (@/components, @/lib, etc.)
- Enable strict TypeScript checking

### Development Commands
```bash
npm run dev          # Start development server
npm run build        # Build for production
npm run test         # Run test suite
npm run lint         # Run ESLint
npm run type-check   # Check TypeScript types
```

### ShadCN Component Installation
Before installing any new shadcn/ui components, always check if they are already installed:

1. **Check Existing Components**: Verify if the component already exists in `@/components/ui/`
2. **Installation Command**: If not installed, use pnpm for consistent package management:
   ```bash
   pnpm dlx shadcn@latest add [component-name]
   ```
3. **Verification**: After installation, verify the component is properly imported and functional
4. **Documentation**: Update component usage documentation if adding new components

## Task Completion and Reporting

### Mandatory Reporting Requirements
After completing any development task, you **MUST** either update existing reports or create new reports:

1. **Task Documentation**: Create detailed reports covering:
   - **Task Overview**: Clear description of what was accomplished
   - **Implementation Details**: Technical changes made, files modified, new features added
   - **Impact Analysis**: How the changes affect the project, users, or development workflow
   - **Testing Results**: Verification that changes work as expected
   - **Next Steps**: Recommendations for follow-up work or improvements

2. **Report Types**:
   - **Migration Reports**: For file moves, restructuring, or organizational changes
   - **Feature Reports**: For new tool implementations or enhancements
   - **Bug Fix Reports**: For issue resolutions and problem fixes
   - **Refactoring Reports**: For code improvements and optimizations
   - **Documentation Reports**: For documentation updates or additions

3. **Report Standards**:
   - Use descriptive filenames with kebab-case format (e.g., `documentation-migration-report.md`)
   - Include comprehensive details with before/after comparisons
   - Provide statistics and metrics where applicable
   - Document any challenges encountered and solutions applied
   - Include verification steps and validation results

4. **Report Location**: Place all reports in the `.tasks/` directory for organized task tracking and discovery

5. **Update Existing Reports**: When tasks are related to previous work, update existing reports rather than creating duplicate documentation

## Document Organization

### Documentation Storage Structure
The project follows a clear separation between different types of documentation:

1. **Task Reports** (`.tasks/` directory):
   - All development task reports and completion documentation
   - Migration reports, feature reports, bug fix reports, refactoring reports
   - Task-specific analysis and verification documentation
   - Progress tracking and project history records

2. **General Documentation** (`documents/` directory):
   - Project-wide documentation not tied to specific tools
   - Design specifications, architecture documents, project plans
   - README files, changelogs, and project overview materials
   - General guides, standards, and reference materials

3. **Tool-Specific Documentation** (within each tool's `docs/` folder):
   - Tool specifications, user guides, and API references
   - Tool-specific implementation details and usage examples
   - Component documentation and technical specifications

### Documentation Guidelines
- **Clear Separation**: Maintain distinct boundaries between task reports, general docs, and tool-specific docs
- **Consistent Naming**: Use descriptive, standardized naming conventions for all documentation
- **Easy Discovery**: Organize files for quick location and reference by team members
- **Version Control**: All documentation should be tracked in version control for history and collaboration

## When Implementing New Tools

### Planning Phase
1. Create detailed tool specification document in tools/ directory
2. Define tool requirements, input/output formats, and user workflows
3. Plan error handling scenarios and edge cases
4. Consider performance implications and optimization strategies

### Implementation Phase
1. Create tool directory structure following conventions
2. Implement core logic first, then UI components
3. Use common components where possible for consistency
4. Add comprehensive error handling and validation

### Testing Phase
1. Write unit tests for tool logic and utility functions
2. Test with various input types and edge cases
3. Verify accessibility features and keyboard navigation
4. Test responsive design on different devices

### Integration Phase
1. Register tool in tool registry system
2. Update navigation and routing if needed
3. Add tool to documentation and README
4. Test complete user workflow from discovery to usage

## Code Review Checklist

- [ ] TypeScript types are properly defined with strict typing
- [ ] Components follow naming conventions and project structure
- [ ] Error handling is comprehensive and user-friendly
- [ ] Accessibility features are present and tested
- [ ] Performance considerations are addressed
- [ ] Tests are written and passing with good coverage
- [ ] Documentation is updated and accurate
- [ ] Code follows project structure and import organization
- [ ] Responsive design is implemented and tested
- [ ] Dark mode support is included and functional
- [ ] No Chinese characters in any code or comments
- [ ] Common components are used appropriately
- [ ] Tool-specific components are justified and well-designed 